apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: kaniko-build
  resourceVersion: "150436171"
  uid: 7c58a2a0-9efc-4ae9-8812-66491f414386
spec:
  description: This task builds a simple Dockerfile with kaniko and pushes to a registry.
    It then stores the image ref as a result.
  params:
  - description: URL to tarball of source code
    name: source_tar
    type: string
  - description: Name (reference) of the image to build.
    name: image
    type: string
  - default: ./Dockerfile
    description: Path to the Dockerfile to build.
    name: dockerfile
    type: string
  - default: .
    description: The build context used by Kaniko.
    name: context
    type: string
  - default: []
    description: Extra args to pass to Kaniko build
    name: extra_args
    type: array
  - default: ""
    description: |
      PEM encoded certificate data for the image registry where the image will be pushed to.
    name: ca_cert_data
    type: string
  results:
  - description: Digest of the image just built.
    name: image_digest
    type: string
  - description: Ref of the image just built.
    name: image_ref
    type: string
  steps:
  - image: 384617649113.dkr.ecr.eu-north-1.amazonaws.com/p8m8nm3rts18/tanzu-application-platform/tap-packages@sha256:72dddaea72f572810d325aa6754da040d5d00e246f11cfdd1a7bcefdca071e43
    name: pull-source-code
    resources: {}
    script: |
      #!/usr/bin/env bash

      set -o errexit
      set -o xtrace

      source="$(params.source_tar)"

      cd `mktemp -d`
      curl -sL -o source.tar.gz "${source}"
      tar --touch --no-overwrite-dir -xzf source.tar.gz -C /source
    volumeMounts:
    - mountPath: /source
      name: source-dir
  - env:
    - name: DOCKER_CONFIG
      value: /docker-config/
    image: 384617649113.dkr.ecr.eu-north-1.amazonaws.com/p8m8nm3rts18/tanzu-application-platform/tap-packages@sha256:72dddaea72f572810d325aa6754da040d5d00e246f11cfdd1a7bcefdca071e43
    name: copy-docker-config-and-certs
    resources: {}
    script: |
      #!/usr/bin/env bash

      set -o errexit
      set -o xtrace

      cp /tekton/creds/.docker/config.json /docker-config/

      cp /etc/ssl/certs/ca-certificates.crt /certs/ca-certificates.crt
      if [[ ! -z "$(params.ca_cert_data)" ]]; then
        echo "$(params.ca_cert_data)" >> /certs/ca-certificates.crt
      fi
    volumeMounts:
    - mountPath: /docker-config
      name: docker-config
    - mountPath: /certs
      name: ca-certs
  - args:
    - $(params.extra_args)
    - --dockerfile=$(params.dockerfile)
    - --context=dir:///source/$(params.context)
    - --destination=$(params.image)
    - --digest-file=$(results.image_digest.path)
    - --ignore-path=//product_uuid
    env:
    - name: DOCKER_CONFIG
      value: /kaniko/.docker
    image: 384617649113.dkr.ecr.eu-north-1.amazonaws.com/p8m8nm3rts18/tanzu-application-platform/tap-packages@sha256:cad67f6cba8ed997da406328481471ae34abe8f0111a64feaab64f6a9c8c6c7e
    name: build-and-push
    resources: {}
    securityContext:
      runAsUser: 0
    volumeMounts:
    - mountPath: /source
      name: source-dir
    - mountPath: /kaniko/.docker
      name: docker-config
    - mountPath: /kaniko/ssl/certs
      name: ca-certs
  - image: 384617649113.dkr.ecr.eu-north-1.amazonaws.com/p8m8nm3rts18/tanzu-application-platform/tap-packages@sha256:72dddaea72f572810d325aa6754da040d5d00e246f11cfdd1a7bcefdca071e43
    name: write-image-ref
    resources: {}
    script: |
      #!/usr/bin/env bash

      set -o errexit
      set -o xtrace

      image="$(params.image)"
      digest_path="$(results.image_digest.path)"
      digest="$(cat ${digest_path})"

      echo -n "${image}@${digest}" | tee "$(results.image_ref.path)"
  volumes:
  - emptyDir: {}
    name: docker-config
  - emptyDir: {}
    name: source-dir
  - emptyDir: {}
    name: ca-certs
