apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  labels:
    app.tanzu.vmware.com/deliverable-type: argo
  name: app-values-config-template
spec:
  configPath: .data
  healthRule:
    alwaysHealthy: {}
  ytt: |
    #@ load("@ytt:overlay", "overlay")
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")
    #@ load("@ytt:regexp", "regexp")
    #@ load("@ytt:template", "template")
    #@ load("@ytt:struct", "struct")

    #! add all workload labels to the fixed values in this 
    #! template as well for the stamped out configmap
    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ files = data.list()

    #@ def app_values_file():
    #@  return data.list()[data.list().index("kubernetes/helm/ecsdemo-frontend/values.yaml")]
    #@ end

    #@ def image_url():
    #@   tmp = data.values.image.image_ref.path
    #@   return tmp.split("@")[0]
    #@ end
        
    #@ def image_digest():
    #@   tmp = data.values.image.image_ref.path
    #@   return tmp.split("@")[1]
    #@ end

    #@ def old_values():
    #@  return data.read(app_values_file())
    #@ end

    #@ def overlay_values_file():
    #@   return overlay.apply(yaml.decode(old_values()), values_overlay()[0])
    #@ end

    #@ def values_overlay():
    #@overlay/match by=overlay.all
    ---
    image:
      #@overlay/match missing_ok=True
      repository: #@ image_url()
      #@overlay/match missing_ok=True
      digest: #@ image_digest()
    #@ end
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: #@ "{}-app-values-app".format(data.values.workload.metadata.name)
      labels: #@ merge_labels({ "app.kubernetes.io/component": "config" })
    data: 
      values.yaml: #@ overlay_values_file()


