apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: extract-values-template
spec:
  imagePath: .status.taskResults[?(@.name=="values_file")].value
  lifecycle: tekton

  ytt: |
    #@ load("@ytt:data", "data")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def image():
    #@   return "/".join([
    #@    data.values.params.registry.server,
    #@    data.values.params.registry.repository,
    #@    "-".join([
    #@      data.values.workload.metadata.name,
    #@      data.values.workload.metadata.namespace,
    #@    ])
    #@   ])
    #@ end

    #@ def ca_cert_data():
    #@   if "ca_cert_data" not in param("registry"):
    #@     return ""
    #@   end
    #@
    #@   return param("registry")["ca_cert_data"]
    #@ end

    ---
    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: #@ data.values.workload.metadata.name + "-extract-values"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "extract-values" })
    spec:
      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName

      runTemplateRef:
        name: extract-values-file-runtemplate

      inputs:
        serviceAccount: default
        taskRef:
          kind: ClusterTask
          name: extract-values-file
        params:
          - name: TAR_URL
            value: #@ data.values.source.url
          - name: VALUES_PATH
            #@yaml/text-templated-strings
            value: "kubernetes/helm/(@= data.values.workload.metadata.name @)/values.yaml"
        workspaces:
          - name: shared-data
            volumeClaimTemplate:
              spec:
                accessModes:
                - ReadWriteOnce
                resources:
                  requests:
                    storage: 100Mi